-What happens when you initialize a repository? Why do you need to do it?

To be able to start version control (and commit your versions) you will have to initialize the repository. 

- How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory is the entire directory your working on. The repository works only on the files added to the stage.

-How can you use the staging area to make sure you have one commit per logical change?

By using the command 'git status'. You will see the files added to the stage. You could even see the differences between the stage and the work directroy by using the command 'git diff'. Or between the stage and the commit by using the command 'git diff --staged'

-What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you are considering making several versions of the game. Via the branches you would keep both versions tracked.

-How do diagrams help you visualize the branch structure? 

It is a visual representation of the branch-system. 

-What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

All changes made from the common parrent until the last commit are comitted. The new merged master has all commits from both branches.

-What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Pros are that it is very fast. The cons are that you can't totally controll the result and you might end up spending some time checking out the conflicts.